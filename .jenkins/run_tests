#!/bin/sh

set -e

cd $(dirname $0)
cd ..

create_mysql() {
    # to make sure the latest is in JKS cache... can comment out sometime in the future :P
    MYSQLDOCKER=$(docker run \
		           -e MYSQL_ROOT_PASSWORD=root \
		           --rm -d \
				   --health-cmd "mysqladmin ping" \
				   --health-interval 10s \
				   --health-timeout 5s \
				   --health-retries=5 \
				   mysql:5)
    trap "rm_mysql" EXIT
}

wait_mysql() {
    echo "Waiting for mysql container (${MYSQLDOCKER})..."
    while [ 1 ]; do
        docker inspect --format='{{.State.Health}}' ${MYSQLDOCKER} | grep -q '^{healthy' && break
        sleep 0.5
    done
}

rm_mysql() {
    echo "Removing mysql container"
    docker rm -f ${MYSQLDOCKER} > /dev/null
}

if [ ! -e /.dockerenv ]; then
    # not in container
    create_mysql
    PACKAGE_NAME=$(cat setup.cfg | grep ^"name = " | cut -d ' ' -f3-)
    docker build -t ppb_${PACKAGE_NAME}_tests_image -f .jenkins/Dockerfile.tests .
    wait_mysql
    docker run -v $(pwd):/work \
               -w /work \
               --link ${MYSQLDOCKER}:mysql \
               -e DBCLEANUP_TEST_MYSQL_HOST=mysql \
               -e DBCLEANUP_TEST_MYSQL_PORT=3306 \
               -e COVERAGE_REPORT_XML=/work/.reports/coverage.xml \
               -e JUNIT_REPORT_XML=/work/.reports/junit.xml \
               ppb_${PACKAGE_NAME}_tests_image \
               /work/.jenkins/run_tests
    exit 0
fi

python -m pytest testapp \
       --cov \
       --no-cov-on-fail \
       --junit-xml ${JUNIT_REPORT_XML:-/dev/null} \
       --cov-report xml:${COVERAGE_REPORT_XML:-/dev/null} \
       --cov-report term-missing \
       --ds testapp.settings_mysql
